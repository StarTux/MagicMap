[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex 2dd96b4..a2302ab 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -13,8 +13,8 @@[m
   <repositories>[m
     <!-- Spigot Repo -->[m
     <repository>[m
[31m-      <id>spigot-repo</id>[m
[31m-      <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>[m
[32m+[m[32m      <id>paper-repo</id>[m
[32m+[m[32m      <url>https://cavetale.com/jenkins/plugin/repository/everything/</url>[m
     </repository>[m
   </repositories>[m
   <dependencies>[m
[36m@@ -25,12 +25,11 @@[m
       <version>4.11</version>[m
       <scope>test</scope>[m
     </dependency>[m
[31m-    <!-- Spigot-API -->[m
[32m+[m[32m    <!-- Paper -->[m
     <dependency>[m
[31m-      <groupId>org.spigotmc</groupId>[m
[31m-      <artifactId>spigot-api</artifactId>[m
[31m-      <version>1.13.1-R0.1-SNAPSHOT</version>[m
[31m-      <scope>provided</scope>[m
[32m+[m[32m      <groupId>com.destroystokyo.paper</groupId>[m
[32m+[m[32m      <artifactId>paper-api</artifactId>[m
[32m+[m[32m      <version>1.13.2-R0.1-SNAPSHOT</version>[m
     </dependency>[m
     <!-- Lombok -->[m
     <dependency>[m
[1mdiff --git a/src/main/java/com/winthier/minimap/MiniMapPlugin.java b/src/main/java/com/winthier/minimap/MiniMapPlugin.java[m
[1mindex 7979a52..8bd713e 100644[m
[1m--- a/src/main/java/com/winthier/minimap/MiniMapPlugin.java[m
[1m+++ b/src/main/java/com/winthier/minimap/MiniMapPlugin.java[m
[36m@@ -1,275 +1,134 @@[m
 package com.winthier.minimap;[m
 [m
[32m+[m[32mimport com.google.gson.Gson;[m
 import java.io.File;[m
[32m+[m[32mimport java.io.FileReader;[m
[32m+[m[32mimport java.io.FileWriter;[m
 import java.io.IOException;[m
[31m-import java.util.ArrayList;[m
[31m-import java.util.HashMap;[m
[31m-import java.util.HashSet;[m
[31m-import java.util.List;[m
[31m-import java.util.Map;[m
[31m-import java.util.UUID;[m
[31m-import java.util.stream.Collectors;[m
 import lombok.Getter;[m
[32m+[m[32mimport org.bukkit.Bukkit;[m
[32m+[m[32mimport org.bukkit.Color;[m
 import org.bukkit.Material;[m
[31m-import org.bukkit.command.Command;[m
[31m-import org.bukkit.command.CommandSender;[m
[31m-import org.bukkit.configuration.ConfigurationSection;[m
[31m-import org.bukkit.configuration.file.YamlConfiguration;[m
 import org.bukkit.entity.Player;[m
[31m-import org.bukkit.event.EventHandler;[m
[31m-import org.bukkit.event.Listener;[m
[31m-import org.bukkit.event.player.PlayerJoinEvent;[m
[31m-import org.bukkit.event.player.PlayerQuitEvent;[m
 import org.bukkit.inventory.ItemStack;[m
[31m-import org.bukkit.map.MapPalette;[m
[32m+[m[32mimport org.bukkit.inventory.meta.MapMeta;[m
 import org.bukkit.map.MapRenderer;[m
 import org.bukkit.map.MapView;[m
 import org.bukkit.metadata.FixedMetadataValue;[m
[32m+[m[32mimport org.bukkit.metadata.MetadataValue;[m
 import org.bukkit.plugin.java.JavaPlugin;[m
[31m-import org.bukkit.scheduler.BukkitRunnable;[m
 [m
 @Getter[m
[31m-public final class MiniMapPlugin extends JavaPlugin implements Listener {[m
[31m-    @Getter private static MiniMapPlugin instance = null;[m
[31m-    private final HashMap<UUID, Session> sessions = new HashMap<>();[m
[31m-    private final HashMap<String, String> worldNames = new HashMap<>();[m
[31m-    private List<Marker> markers;[m
[31m-    private HashSet<UUID> given;[m
[31m-    private int mapId;[m
[31m-    private boolean debug, give, persist;[m
[32m+[m[32mpublic final class MiniMapPlugin extends JavaPlugin {[m
[32m+[m[32m    // Map persistence[m
     private MapView mapView;[m
[31m-    private Font4x4 font4x4;[m
[31m-    private TerrainRenderer renderer = new TerrainRenderer(this);[m
[31m-    private YamlConfiguration userSettings = null;[m
[32m+[m[32m    // Configuration[m
[32m+[m[32m    private int mapId;[m
[32m+[m[32m    private int mapColor;[m
[32m+[m[32m    private String mapName;[m
[32m+[m[32m    private boolean debug, persist;[m
[32m+[m[32m    // Tools[m
[32m+[m[32m    private TinyFont tinyFont;[m
[32m+[m[32m    private MiniMapRenderer miniMapRenderer;[m
[32m+[m[32m    private MapGiver mapGiver;[m
[32m+[m[32m    private MiniMapCommand miniMapCommand;[m
[32m+[m
[32m+[m[32m    // --- Plugin[m
 [m
     @Override[m
     public void onEnable() {[m
[31m-        instance = this;[m
[32m+[m[32m        this.miniMapRenderer = new MiniMapRenderer(this);[m
[32m+[m[32m        setupMap();[m
[32m+[m[32m        getLogger().info("Using map #" + this.mapId + ".");[m
         saveDefaultConfig();[m
[31m-        readConfiguration();[m
[31m-        getServer().getPluginManager().registerEvents(this, this);[m
[31m-        font4x4 = new Font4x4(this);[m
[32m+[m[32m        this.tinyFont = new TinyFont(this);[m
[32m+[m[32m        this.mapGiver = new MapGiver(this);[m
[32m+[m[32m        getServer().getPluginManager().registerEvents(this.mapGiver, this);[m
[32m+[m[32m        this.miniMapCommand = new MiniMapCommand(this);[m
[32m+[m[32m        getCommand("minimap").setExecutor(this.miniMapCommand);[m
[32m+[m[32m        importConfig();[m
     }[m
 [m
     @Override[m
     public void onDisable() {[m
[31m-        sessions.clear();[m
         resetMapView();[m
[31m-    }[m
[31m-[m
[31m-    @Override[m
[31m-    public boolean onCommand(CommandSender sender, Command command, String alias, String[] args) {[m
[31m-        String cmd = args.length == 0 ? null : args[0].toLowerCase();[m
[31m-        Player player = sender instanceof Player ? (Player)sender : null;[m
[31m-        if ("reload".equals(cmd)) {[m
[31m-            readConfiguration();[m
[31m-            sessions.clear();[m
[31m-            given = null;[m
[31m-            userSettings = null;[m
[31m-            sender.sendMessage("MiniMap config reloaded");[m
[31m-        } else if ("setmarker".equals(cmd) && args.length >= 3) {[m
[31m-            if (player == null) return false;[m
[31m-            String name = args[1];[m
[31m-            if (!name.matches("[a-zA-Z0-9-_]{1,32}")) {[m
[31m-                sender.sendMessage("Illegal marker name " + name);[m
[31m-                return true;[m
[31m-            }[m
[31m-            StringBuilder sb = new StringBuilder(args[2]);[m
[31m-            for (int i = 3; i < args.length; i += 1) sb.append(" ").append(args[i]);[m
[31m-            Marker marker = null;[m
[31m-            for (Marker iter: getMarkers()) {[m
[31m-                if (iter.getName().equals(name)) marker = iter;[m
[31m-            }[m
[31m-            if (marker == null) {[m
[31m-                marker = new Marker();[m
[31m-                getMarkers().add(marker);[m
[31m-            }[m
[31m-            marker.setName(name);[m
[31m-            marker.setWorld(player.getWorld().getName());[m
[31m-            marker.setX(player.getLocation().getBlockX());[m
[31m-            marker.setZ(player.getLocation().getBlockZ());[m
[31m-            marker.setMessage(sb.toString());[m
[31m-            saveMarkers();[m
[31m-            player.sendMessage("Marker set");[m
[31m-        } else if ("color".equals(cmd) && args.length == 2) {[m
[31m-            int color = Integer.parseInt(args[1]);[m
[31m-            sender.sendMessage(String.format("%d = (%d, %d, %d)", color,[m
[31m-                                             MapPalette.getColor((byte)color).getRed(),[m
[31m-                                             MapPalette.getColor((byte)color).getGreen(),[m
[31m-                                             MapPalette.getColor((byte)color).getBlue()));[m
[31m-        } else if ("debug".equals(cmd) && args.length == 1) {[m
[31m-            if (player == null) return false;[m
[31m-            Session session = getSession(player);[m
[31m-            boolean v = !session.isDebug();[m
[31m-            session.setDebug(v);[m
[31m-            if (v) {[m
[31m-                sender.sendMessage("Debug mode enabled");[m
[31m-            } else {[m
[31m-                sender.sendMessage("Debug mode disabled");[m
[31m-            }[m
[31m-        } else {[m
[31m-            return false;[m
[32m+[m[32m        for (Player player: this.getServer().getOnlinePlayers()) {[m
[32m+[m[32m            player.removeMetadata("minimap.session", this);[m
         }[m
[31m-        return true;[m
     }[m
 [m
[31m-    void resetMapView() {[m
[31m-        if (mapView != null) {[m
[31m-            for (MapRenderer renderer: mapView.getRenderers()) {[m
[31m-                mapView.removeRenderer(renderer);[m
[31m-            }[m
[31m-            mapView = null;[m
[31m-        }[m
[31m-    }[m
[32m+[m[32m    // --- Configuration[m
 [m
[31m-    private void readConfiguration() {[m
[32m+[m[32m    void importConfig() {[m
         reloadConfig();[m
[32m+[m[32m        this.debug = getConfig().getBoolean("Debug");[m
[32m+[m[32m        this.mapGiver.setEnabled(getConfig().getBoolean("Give"));[m
[32m+[m[32m        this.mapGiver.setPersist(getConfig().getBoolean("Persist"));[m
[32m+[m[32m        this.mapColor = getConfig().getInt("MapColor");[m
[32m+[m[32m        this.mapName = getConfig().getString("MapName");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    void setupMap() {[m
         resetMapView();[m
[31m-        mapId = getConfig().getInt("MapID");[m
[31m-        debug = getConfig().getBoolean("Debug");[m
[31m-        give = getConfig().getBoolean("Give");[m
[31m-        persist = getConfig().getBoolean("Persist");[m
[31m-        if (mapId >= 0 && mapId < 256) {[m
[31m-            mapView = getServer().getMap((short)mapId);[m
[31m-            while (mapView == null) {[m
[31m-                mapView = getServer().createMap(getServer().getWorlds().get(0));[m
[31m-                mapView = getServer().getMap((short)mapId);[m
[32m+[m[32m        Gson gson = new Gson();[m
[32m+[m[32m        File file = new File(getDataFolder(), "map_id.json");[m
[32m+[m[32m        if (!file.exists()) {[m
[32m+[m[32m            this.mapView = getServer().createMap(getServer().getWorlds().get(0));[m
[32m+[m[32m            if (this.mapView == null) {[m
[32m+[m[32m                throw new IllegalStateException("Could not create new map.");[m
             }[m
[31m-            for (MapRenderer renderer: mapView.getRenderers()) {[m
[31m-                mapView.removeRenderer(renderer);[m
[32m+[m[32m            this.mapId = (int)mapView.getId();[m
[32m+[m[32m            try (FileWriter writer = new FileWriter(file)) {[m
[32m+[m[32m                gson.toJson(this.mapId, writer);[m
[32m+[m[32m            } catch (IOException ioe) {[m
[32m+[m[32m                throw new IllegalStateException("Could not write " + file, ioe);[m
             }[m
[31m-            mapView.addRenderer(renderer);[m
         } else {[m
[31m-            System.err.println("Invalid Map ID: " + mapId);[m
[31m-        }[m
[31m-        sessions.clear();[m
[31m-        worldNames.clear();[m
[31m-        ConfigurationSection section = getConfig().getConfigurationSection("WorldNames");[m
[31m-        if (section != null) {[m
[31m-            for (String key: section.getKeys(false)) {[m
[31m-                worldNames.put(key, section.getString(key));[m
[32m+[m[32m            try (FileReader reader = new FileReader(file)) {[m
[32m+[m[32m                this.mapId = gson.fromJson(reader, Integer.class);[m
[32m+[m[32m            } catch (IOException ioe) {[m
[32m+[m[32m                throw new IllegalStateException("Could not read " + file, ioe);[m
             }[m
[31m-        }[m
[31m-        markers = null;[m
[31m-    }[m
[31m-[m
[31m-    Session getSession(Player player) {[m
[31m-        Session session = sessions.get(player.getUniqueId());[m
[31m-        if (session == null) {[m
[31m-            session = new Session();[m
[31m-            sessions.put(player.getUniqueId(), session);[m
[31m-        }[m
[31m-        return session;[m
[31m-    }[m
[31m-[m
[31m-    private YamlConfiguration getUserSettings() {[m
[31m-        if (userSettings == null) {[m
[31m-            userSettings = YamlConfiguration.loadConfiguration(new File(getDataFolder(), "user_settings.yml"));[m
[31m-        }[m
[31m-        return userSettings;[m
[31m-    }[m
[31m-[m
[31m-    ConfigurationSection getUserSettings(UUID uuid) {[m
[31m-        String key = uuid.toString();[m
[31m-        ConfigurationSection config = getUserSettings().getConfigurationSection(key);[m
[31m-        if (config == null) config = getUserSettings().createSection(key);[m
[31m-        return config;[m
[31m-    }[m
[31m-[m
[31m-    private void saveUserSettings() {[m
[31m-        if (userSettings == null) return;[m
[31m-        try {[m
[31m-            userSettings.save(new File(getDataFolder(), "user_settings.yml"));[m
[31m-        } catch (IOException ioe) {[m
[31m-            ioe.printStackTrace();[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    private HashSet<UUID> getGiven() {[m
[31m-        if (given == null) {[m
[31m-            given = new HashSet<>();[m
[31m-            if (persist) {[m
[31m-                YamlConfiguration.loadConfiguration(new File(getDataFolder(), "given.yml")).getStringList("given").forEach(str -> given.add(UUID.fromString(str)));[m
[32m+[m[32m            this.mapView = getServer().getMap((short)this.mapId);[m
[32m+[m[32m            if (this.mapView == null) {[m
[32m+[m[32m                throw new IllegalStateException("Could not fetch map #" + this.mapId);[m
             }[m
         }[m
[31m-        return given;[m
[31m-    }[m
[31m-[m
[31m-    void saveGiven() {[m
[31m-        if (given == null || !persist) return;[m
[31m-        YamlConfiguration config = new YamlConfiguration();[m
[31m-        config.set("given", given.stream().map(uuid -> uuid.toString()).collect(Collectors.toList()));[m
[31m-        try {[m
[31m-            config.save(new File(getDataFolder(), "given.yml"));[m
[31m-        } catch (IOException ioe) {[m
[31m-            ioe.printStackTrace();[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    @EventHandler[m
[31m-    public void onPlayerJoin(PlayerJoinEvent event) {[m
[31m-        UUID uuid = event.getPlayer().getUniqueId();[m
[31m-        if (getGiven().contains(uuid)) return;[m
[31m-        for (ItemStack item: event.getPlayer().getInventory()) {[m
[31m-            if (item != null && item.getType() == Material.MAP && item.getDurability() == mapId) {[m
[31m-                getGiven().add(uuid);[m
[31m-                saveGiven();[m
[31m-                return;[m
[31m-            }[m
[32m+[m[32m        for (MapRenderer renderer: this.mapView.getRenderers()) {[m
[32m+[m[32m            this.mapView.removeRenderer(renderer);[m
         }[m
[31m-        // TODO: Give map[m
[32m+[m[32m        this.mapView.addRenderer(this.miniMapRenderer);[m
     }[m
 [m
[31m-    @EventHandler[m
[31m-    public void onPlayerQuit(PlayerQuitEvent event) {[m
[31m-        final UUID uuid = event.getPlayer().getUniqueId();[m
[31m-        new BukkitRunnable() {[m
[31m-            @Override public void run() {[m
[31m-                sessions.remove(uuid);[m
[31m-            }[m
[31m-        }.runTask(this);[m
[31m-    }[m
[32m+[m[32m    // --- Utility[m
 [m
[31m-    String getWorldName(String worldName) {[m
[31m-        String result;[m
[31m-        result = worldNames.get(worldName);[m
[31m-        if (result != null) return result;[m
[31m-        return worldName;[m
[32m+[m[32m    Session getSession(Player player) {[m
[32m+[m[32m        for (MetadataValue v: player.getMetadata("minimap.session")) {[m
[32m+[m[32m            if (v.getOwningPlugin().equals(this)) return (Session)v.value();[m
[32m+[m[32m        }[m
[32m+[m[32m        Session session = new Session();[m
[32m+[m[32m        player.setMetadata("minimap.session", new FixedMetadataValue(this, session));[m
[32m+[m[32m        return session;[m
     }[m
 [m
[31m-    List<Marker> getMarkers() {[m
[31m-        if (markers == null) {[m
[31m-            markers = new ArrayList<>();[m
[31m-            YamlConfiguration config = YamlConfiguration.loadConfiguration(new File(getDataFolder(), "markers.yml"));[m
[31m-            for (String key: config.getKeys(false)) {[m
[31m-                ConfigurationSection section = config.getConfigurationSection(key);[m
[31m-                if (section == null) continue;[m
[31m-                Marker marker = new Marker();[m
[31m-                marker.setName(key);[m
[31m-                marker.setWorld(section.getString("world"));[m
[31m-                marker.setX(section.getInt("x"));[m
[31m-                marker.setZ(section.getInt("z"));[m
[31m-                marker.setMessage(section.getString("message"));[m
[31m-                markers.add(marker);[m
[32m+[m[32m    private void resetMapView() {[m
[32m+[m[32m        if (this.mapView != null) {[m
[32m+[m[32m            for (MapRenderer renderer: this.mapView.getRenderers()) {[m
[32m+[m[32m                mapView.removeRenderer(renderer);[m
             }[m
[32m+[m[32m            this.mapView = null;[m
         }[m
[31m-        return markers;[m
     }[m
 [m
[31m-    void saveMarkers() {[m
[31m-        if (markers == null) return;[m
[31m-        YamlConfiguration config = new YamlConfiguration();[m
[31m-        for (Marker marker: markers) {[m
[31m-            ConfigurationSection section = config.createSection(marker.getName());[m
[31m-            section.set("world", marker.getWorld());[m
[31m-            section.set("x", marker.getX());[m
[31m-            section.set("z", marker.getZ());[m
[31m-            section.set("message", marker.getMessage());[m
[31m-        }[m
[31m-        try {[m
[31m-            config.save(new File(getDataFolder(), "markers.yml"));[m
[31m-        } catch (IOException ioe) {[m
[31m-            ioe.printStackTrace();[m
[31m-        }[m
[32m+[m[32m    public ItemStack createMapItem() {[m
[32m+[m[32m        ItemStack item = new ItemStack(Material.FILLED_MAP);[m
[32m+[m[32m        MapMeta meta = (MapMeta)item.getItemMeta();[m
[32m+[m[32m        meta.setMapId(this.mapId);[m
[32m+[m[32m        meta.setScaling(false);[m
[32m+[m[32m        meta.setColor(Color.fromRGB(this.mapColor));[m
[32m+[m[32m        meta.setLocationName("MiniMap");[m
[32m+[m[32m        meta.setDisplayName(this.mapName);[m
[32m+[m[32m        item.setItemMeta(meta);[m
[32m+[m[32m        return item;[m
     }[m
 }[m
[1mdiff --git a/src/main/java/com/winthier/minimap/Session.java b/src/main/java/com/winthier/minimap/Session.java[m
[1mindex e556480..9d07b1c 100644[m
[1m--- a/src/main/java/com/winthier/minimap/Session.java[m
[1m+++ b/src/main/java/com/winthier/minimap/Session.java[m
[36m@@ -5,31 +5,16 @@[m [mimport java.util.HashMap;[m
 import java.util.List;[m
 import java.util.Map;[m
 import lombok.AllArgsConstructor;[m
[31m-import lombok.Data;[m
 import lombok.RequiredArgsConstructor;[m
[32m+[m[32mimport org.bukkit.map.MapCursorCollection;[m
 [m
[31m-@Data[m
 final class Session {[m
[31m-    private long lastRender;[m
[31m-    private final Map<Class<?>, Object> storage = new HashMap<>();[m
[31m-    private boolean debug;[m
[31m-    private MapCache drawMap, lastMap;[m
[31m-[m
[31m-    void store(Object o) {[m
[31m-        storage.put(o.getClass(), o);[m
[31m-    }[m
[31m-[m
[31m-    <T> T fetch(Class<T> clazz) {[m
[31m-        return clazz.cast(storage.get(clazz));[m
[31m-    }[m
[31m-[m
[31m-    <T> T remove(Class<T> clazz) {[m
[31m-        return clazz.cast(storage.remove(clazz));[m
[31m-    }[m
[31m-[m
[31m-    MapCache removeDrawMap() {[m
[31m-        MapCache result = drawMap;[m
[31m-        drawMap = null;[m
[31m-        return result;[m
[31m-    }[m
[32m+[m[32m    long lastRender;[m
[32m+[m[32m    boolean rendering;[m
[32m+[m[32m    boolean cursoring;[m
[32m+[m[32m    boolean debug;[m
[32m+[m[32m    int centerX, centerZ;[m
[32m+[m[32m    // Results[m
[32m+[m[32m    MapCache pasteMap;[m
[32m+[m[32m    MapCursorCollection pasteCursors;[m
 }[m
[1mdiff --git a/src/main/resources/config.yml b/src/main/resources/config.yml[m
[1mindex 64420dc..450b399 100644[m
[1m--- a/src/main/resources/config.yml[m
[1m+++ b/src/main/resources/config.yml[m
[36m@@ -1,13 +1,5 @@[m
 Debug: false[m
[31m-MapID: 0[m
[31m-Give: true[m
[32m+[m[32mMapColor: 0[m
[32m+[m[32mMapName: '§3Mini Map'[m
[32m+[m[32mGive: false[m
 Persist: true[m
[31m-item:[m
[31m-  DisplayName: Mini Map[m
[31m-  Category: Orientation[m
[31m-  Description: This map centers on your player and follows as you move around the worlds of Winthier.  It displays claims and other useful information.[m
[31m-  Usage: Right-click to open the help menu.[m
[31m-WorldNames:[m
[31m-  world: Survival[m
[31m-  world_nether: Nether[m
[31m-  world_the_end: End[m
\ No newline at end of file[m
[1mdiff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml[m
[1mindex f2237ab..1fbd936 100644[m
[1m--- a/src/main/resources/plugin.yml[m
[1m+++ b/src/main/resources/plugin.yml[m
[36m@@ -5,8 +5,8 @@[m [mversion: 0.1[m
 api-version: 1.13[m
 website: https://cavetale.com[m
 main: com.winthier.minimap.MiniMapPlugin[m
[31m-depend: [ ][m
[31m-softdepend: [ ][m
[32m+[m[32mdepend: [][m
[32m+[m[32msoftdepend: [][m
 commands:[m
   minimap:[m
     description: Debug command[m
[1mdiff --git a/src/test/java/com/winthier/minimap/MiniMapTest.java b/src/test/java/com/winthier/minimap/MiniMapTest.java[m
[1mindex a1b06b5..8903d9a 100644[m
[1m--- a/src/test/java/com/winthier/minimap/MiniMapTest.java[m
[1m+++ b/src/test/java/com/winthier/minimap/MiniMapTest.java[m
[36m@@ -7,20 +7,20 @@[m [mimport javax.imageio.ImageIO;[m
 import org.bukkit.map.MapPalette;[m
 import org.junit.Test;[m
 import org.bukkit.Material;[m
[32m+[m
 public final class MiniMapTest {[m
     @Test[m
     public void main() throws Exception {[m
[31m-        // BufferedImage image = ImageIO.read(new File("src/main/resources/Font4x4.png"));[m
[31m-        // Font4x4 font4x4 = new Font4x4(image);[m
[31m-        // for (org.bukkit.DyeColor dye: org.bukkit.DyeColor.values()) {[m
[31m-        //     // org.bukkit.Color c = dye.getColor();[m
[31m-        //     // int result = MapPalette.matchColor(new java.awt.Color(c.getRed(), c.getGreen(), c.getBlue()));[m
[31m-        //     System.out.println("case " + dye + "_GLAZED_TERRACOTTA:");[m
[31m-        // }[m
[31m-        // for (Field field: MapPalette.class.getDeclaredFields()) {[m
[31m-        //     if (field.getType() != byte.class) continue;[m
[31m-        //     field.setAccessible(true);[m
[31m-        //     System.out.println("public static final int " + field.getName() + " = " + field.getInt(null) + ";");[m
[32m+[m[32m        // java.io.PrintStream out = new java.io.PrintStream(new File("target/colors.txt"));[m
[32m+[m[32m        // for (Field field: Blocks.class.getDeclaredFields()) {[m
[32m+[m[32m        //     if (field.getType().equals(Block.class)) {[m
[32m+[m[32m        //         Block block = (Block)field.get(null);[m
[32m+[m[32m        //         Field lField = Block.class.getDeclaredField("l");[m
[32m+[m[32m        //         lField.setAccessible(true);[m
[32m+[m[32m        //         MaterialMapColor color = (MaterialMapColor)lField.get(block);[m
[32m+[m[32m        //         out.println(" case " + field.getName() + ": return " + color.ac + ";");[m
[32m+[m[32m        //     }[m
         // }[m
[32m+[m[32m        // out.close();[m
     }[m
 }[m
